// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Turksa.DataAccessLayer.Context;

#nullable disable

namespace Turksa.DataAccessLayer.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    [Migration("20230728133403_InitDb2")]
    partial class InitDb2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KategoriStok", b =>
                {
                    b.Property<int>("KategorilerId")
                        .HasColumnType("int");

                    b.Property<int>("StoklarId")
                        .HasColumnType("int");

                    b.HasKey("KategorilerId", "StoklarId");

                    b.HasIndex("StoklarId");

                    b.ToTable("KategoriStok");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Adres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte?>("AdresTipi")
                        .HasColumnType("tinyint");

                    b.Property<string>("CaddeSokak")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CariId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 28, 16, 34, 3, 755, DateTimeKind.Local).AddTicks(9979));

                    b.Property<string>("Ilce")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("KisiId")
                        .HasColumnType("int");

                    b.Property<string>("Sehir")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CariId");

                    b.HasIndex("KisiId");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Birim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BirimAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 28, 16, 34, 3, 756, DateTimeKind.Local).AddTicks(3094));

                    b.HasKey("Id");

                    b.ToTable("Birimler");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Cari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CariAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CariKod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 28, 16, 34, 3, 756, DateTimeKind.Local).AddTicks(4785));

                    b.Property<string>("VergiDairesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VergiNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cari");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 28, 16, 34, 3, 756, DateTimeKind.Local).AddTicks(6530));

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("UstKategoriId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UstKategoriId");

                    b.ToTable("Kategoriler");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Kisi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CariId")
                        .HasColumnType("int");

                    b.Property<bool?>("Cinsiyet")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gsm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CariId");

                    b.ToTable("Kisi");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Stok", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Adet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BirimId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 28, 16, 34, 3, 756, DateTimeKind.Local).AddTicks(7987));

                    b.Property<decimal?>("Fiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StokAdi")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StokKodu")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Stoktipi")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UrunAgaciId")
                        .HasColumnType("int");

                    b.Property<int?>("UstUrunId")
                        .HasColumnType("int");

                    b.Property<int?>("VergiOraniId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BirimId");

                    b.HasIndex("StokKodu")
                        .IsUnique();

                    b.HasIndex("UrunAgaciId");

                    b.HasIndex("UstUrunId");

                    b.HasIndex("VergiOraniId");

                    b.ToTable("Stoklar");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.UrunAgaci", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 28, 16, 34, 3, 757, DateTimeKind.Local).AddTicks(237));

                    b.HasKey("Id");

                    b.ToTable("UrunAgaclari");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Vergi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 7, 28, 16, 34, 3, 757, DateTimeKind.Local).AddTicks(1545));

                    b.Property<decimal>("Oran")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VergiAdi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Vergiler");
                });

            modelBuilder.Entity("KategoriStok", b =>
                {
                    b.HasOne("Turksa.Entity.Concrete.Kategori", null)
                        .WithMany()
                        .HasForeignKey("KategorilerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turksa.Entity.Concrete.Stok", null)
                        .WithMany()
                        .HasForeignKey("StoklarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Adres", b =>
                {
                    b.HasOne("Turksa.Entity.Concrete.Cari", "Cari")
                        .WithMany("Adresler")
                        .HasForeignKey("CariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turksa.Entity.Concrete.Kisi", "Kisi")
                        .WithMany("Adresler")
                        .HasForeignKey("KisiId");

                    b.Navigation("Cari");

                    b.Navigation("Kisi");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Kategori", b =>
                {
                    b.HasOne("Turksa.Entity.Concrete.Kategori", "UstKategori")
                        .WithMany("AltKategoriler")
                        .HasForeignKey("UstKategoriId");

                    b.Navigation("UstKategori");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Kisi", b =>
                {
                    b.HasOne("Turksa.Entity.Concrete.Cari", null)
                        .WithMany("KontakKisiler")
                        .HasForeignKey("CariId");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Stok", b =>
                {
                    b.HasOne("Turksa.Entity.Concrete.Birim", "Birim")
                        .WithMany("Stoklar")
                        .HasForeignKey("BirimId");

                    b.HasOne("Turksa.Entity.Concrete.UrunAgaci", null)
                        .WithMany("Stoklar")
                        .HasForeignKey("UrunAgaciId");

                    b.HasOne("Turksa.Entity.Concrete.Stok", "UstUrun")
                        .WithMany("AltUrunler")
                        .HasForeignKey("UstUrunId");

                    b.HasOne("Turksa.Entity.Concrete.Vergi", "VergiOrani")
                        .WithMany()
                        .HasForeignKey("VergiOraniId");

                    b.Navigation("Birim");

                    b.Navigation("UstUrun");

                    b.Navigation("VergiOrani");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Birim", b =>
                {
                    b.Navigation("Stoklar");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Cari", b =>
                {
                    b.Navigation("Adresler");

                    b.Navigation("KontakKisiler");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Kategori", b =>
                {
                    b.Navigation("AltKategoriler");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Kisi", b =>
                {
                    b.Navigation("Adresler");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.Stok", b =>
                {
                    b.Navigation("AltUrunler");
                });

            modelBuilder.Entity("Turksa.Entity.Concrete.UrunAgaci", b =>
                {
                    b.Navigation("Stoklar");
                });
#pragma warning restore 612, 618
        }
    }
}
